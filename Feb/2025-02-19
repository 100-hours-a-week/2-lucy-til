#### 날짜: 2025-02-19

## 스크럼

학습 목표 1 : 오늘 배운 내용 복습하기  
학습 목표 2 : TIL 정리하기  

⠀  

### 주제 1: WebSocket

| 개념 | 정의 | 비고 |
| --- | --- | --- |
| **HTTP (~특정 지역에서만 요청을 보낼 수 있는 편지)** | 클라이언트 요청 후에만 서버 응답 가능한 프로토콜 | Stateless. HTTP + 폴링: 클라이언트가 주기적으로 요청. HTTP + 논폴링: 서버가 변경 시 응답. 실시간 통신 불가, 연결 오버헤드 발생 가능성 |
| **웹소켓 (~전화)** | **실시간 양방향 통신**을 위한 지속적인 연결 제공 프로토콜 | TCP 기반, 메시지 단위 데이터 전송, 실시간 채팅, 게임, 스포츠 업데이트, 거래 플랫폼. 연결 유지 오버헤드 발생 가능성 |

#### 웹소켓과 TCP 3-Way 핸드셰이크 (전화 예시)
1. 클라이언트가 WebSocket 연결 요청 (전화 걸기)
2. 서버가 연결 수락 여부 결정 (전화 받기)
3. 데이터 송수신 가능 (전화 중 대화)
4. 연결 종료 시 Close 프레임 전송 (전화 끊기)

⠀  

### 주제 2: OSI 7계층

| 계층 | 역할 | 주요 프로토콜 |
| --- | --- | --- |
| 응용 계층 | 사용자 인터페이스 제공 | HTTP, HTTPS, DNS |
| 표현 계층 | 데이터 인코딩/디코딩, 암호화 | SSL/TLS |
| 세션 계층 | 애플리케이션 간 연결 설정 및 종료 | RPC, PPTP |
| 전송 계층 | 데이터 전송 보장 | TCP, UDP |
| 네트워크 계층 | 최적의 경로로 데이터 전달 | IP, ICMP |
| 데이터 링크 계층 | 프레임 단위 전송, 신뢰성 제공 | Ethernet, Wi-Fi |
| 물리 계층 | 신호 전송 | RS-232, USB |

⠀  

### 주제 3: 네트워크 통신 과정

1. 사용자가 웹사이트 요청 (example.com)
2. **DNS 조회** (도메인 → IP 변환)
3. **HTTPS 요청 시작** (TLS 핸드셰이크 수행)
4. **TCP 3-Way 핸드셰이크** (SYN → SYN-ACK → ACK)
5. **패킷 전송 (계층별 이동: 응용 → 물리)**
6. **서버 응답 생성 및 전송**
7. **브라우저 렌더링** (HTML, CSS, JS 해석)

⠀  

### 주제 4: REST API

| 개념 | 정의 | 비고 |
| --- | --- | --- |
| REST | 자원을 URI로 식별하는 아키텍처 스타일 | HTTP 기반, Stateless 원칙 |
| REST API | REST 원칙을 따르는 API | GET, POST, PUT, DELETE 사용 |

#### REST API 설계 원칙
- **명사 기반 URI**: `GET /orders/123` (O), `GET /getOrder?order_id=123` (X)
- **HTTP 메서드 활용**: `POST` (생성), `PUT` (전체 수정), `PATCH` (부분 수정), `DELETE` (삭제)
- **계층적 설계**: `GET /customers/5/orders` (O)

⠀  

### 주제 5: 쿠키와 세션

| 항목 | 쿠키 | 세션 |
| --- | --- | --- |
| 저장 위치 | 클라이언트 | 서버 |
| 보안 | 낮음 (조작 가능) | 높음 (서버에서 관리) |
| 유지 기간 | 설정된 만료 시간까지 | 일정 시간 또는 브라우저 종료 시 |
| 전송 방식 | 요청 시 자동 포함 | 세션 ID를 사용하여 서버에서 관리 |

#### 쿠키 주요 속성
- **Expires/Max-Age**: 만료 시간 설정
- **Secure**: HTTPS 요청에서만 전송 가능
- **HttpOnly**: JavaScript에서 접근 불가 (XSS 방지)
- **SameSite**: CSRF 공격 방지를 위한 제한 설정

⠀  

### 주제 6: 인증 방식 (JWT & OAuth)

| 개념 | 정의 | 비고 |
| --- | --- | --- |
| JWT | JSON 기반의 자체 포함형 토큰 | Stateless 인증 방식, 서버 부하 감소 |
| Access Token | 사용자 인증 및 API 요청 수행 | 만료 시간이 짧음, 유출 위험 존재 |
| Refresh Token | Access Token 재발급 용도 | 만료 시간이 길며, 보안 강화 필요 |
| OAuth | 사용자의 비밀번호 없이 안전하게 데이터 접근 권한 부여 | Google 로그인 등 외부 인증 지원 |

#### JWT 동작 방식
1. 사용자가 로그인하면 Access Token + Refresh Token 발급
2. 클라이언트는 API 요청 시 Access Token을 포함하여 전송
3. Access Token 만료 시 Refresh Token을 사용하여 재발급 요청
4. Refresh Token 만료 시 재로그인 필요

⠀  

### 오늘의 회고

지금까지의 3주차 내용을 복습하면서 한 개념에 대해 이거다!라고 정의내릴만한 부분이 있는지 끊임없이 생각해보게 되었다.  
가장 어려운 것은 결국 완급 조절이었다.  
자신 있는 부분이 나오면 괜찮은데 결국에는 내가 100퍼센트 모든 개념을 알고 있지는 못했다.  
결국에는 반복적인 복습 + 디버깅만이 정답이다.  


